version: "3.1"
services:
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka0:29092
      DYNAMIC_CONFIG_ENABLED: "true"

  kafka0:
    container_name: kafka
    image: confluentinc/cp-kafka:7.6.0
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://kafka0:29092,CONTROLLER://kafka0:29093,PLAINTEXT_HOST://:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka0:29093"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LOG_DIRS: "/tmp/kraft-combined-logs"
      CLUSTER_ID: "ZDFiZmU3ODUyMzRiNGI3NG"

  kafka-init-topics:
    container_name: init-topics
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      - kafka0
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b kafka0:29092 1 30 && \
      kafka-topics --create --topic loms.order-events --partitions 2 --replication-factor 1 --if-not-exists --bootstrap-server kafka0:29092'"

  postgres-1:
    image: "docker.io/bitnami/postgresql:16.2.0"
    hostname: postgres-1
    #    volumes:
    #      - 'postgresql_master_data:/bitnami/postgresql'
    ports:
      - "5433:5432"
    depends_on:
      kafka-init-topics:
        condition: service_completed_successfully
    env_file: .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-2:
    image: "docker.io/bitnami/postgresql:16.2.0"
    hostname: postgres-2
    ports:
      - '5434:5432'
    depends_on:
      kafka-init-topics:
        condition: service_completed_successfully
    env_file: .env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres-stocks:
    image: "docker.io/bitnami/postgresql:16.2.0"
    hostname: postgres-stocks
    ports:
      - '5435:5432'
    depends_on:
      kafka-init-topics:
        condition: service_completed_successfully
    env_file: .env

  cache:
    image: 'bitnami/redis:latest'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    ports:
      - '6379:6379'

  consumer-1:
    container_name: consumer-1
    image: go-consumer-image
    build: ./notifier
    depends_on:
      kafka-init-topics:
        condition: service_completed_successfully

  consumer-2:
    container_name: consumer-2
    image: go-consumer-image
    build: ./notifier
    depends_on:
      - consumer-1

  consumer-3:
    container_name: consumer-3
    image: go-consumer-image
    build: ./notifier
    depends_on:
      - consumer-1

  loms:
    image: loms
    build: ./loms/
    depends_on:
      postgres-1:
        condition: service_healthy
      postgres-2:
        condition: service_healthy
      kafka-init-topics:
        condition: service_completed_successfully
    env_file: .env
    ports:
      - "50051:50051"

  cart:
    image: cart
    build: ./cart/
    depends_on:
      - loms
    env_file: .env
    environment:
      - CART_APP_HTTP_PORT=8080
      - CART_APP_LOMS_API=loms:50051
      - CART_REDIS_ADDR=redis:6379
    ports:
      - "8082:8080"

volumes:
  postgresql_master_data:
    driver: local