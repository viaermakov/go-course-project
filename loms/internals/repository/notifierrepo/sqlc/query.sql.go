// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package notifierrepo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addEvent = `-- name: AddEvent :exec
insert into orders_events (order_id, order_status, created_at, send_status, send_at)
values ($1, $2, $3, $4, $5)
`

type AddEventParams struct {
	OrderID     int64
	OrderStatus int32
	CreatedAt   pgtype.Timestamp
	SendStatus  int32
	SendAt      pgtype.Timestamp
}

func (q *Queries) AddEvent(ctx context.Context, arg AddEventParams) error {
	_, err := q.db.Exec(ctx, addEvent,
		arg.OrderID,
		arg.OrderStatus,
		arg.CreatedAt,
		arg.SendStatus,
		arg.SendAt,
	)
	return err
}

const getScheduledEvents = `-- name: GetScheduledEvents :many
select order_id, order_status, created_at, send_status, send_at
from orders_events
where send_status = $1
`

func (q *Queries) GetScheduledEvents(ctx context.Context, sendStatus int32) ([]OrdersEvent, error) {
	rows, err := q.db.Query(ctx, getScheduledEvents, sendStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrdersEvent
	for rows.Next() {
		var i OrdersEvent
		if err := rows.Scan(
			&i.OrderID,
			&i.OrderStatus,
			&i.CreatedAt,
			&i.SendStatus,
			&i.SendAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :exec
update orders_events
set send_status=$1, send_at=$2
where order_id = $3
`

type UpdateEventParams struct {
	SendStatus int32
	SendAt     pgtype.Timestamp
	OrderID    int64
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.Exec(ctx, updateEvent, arg.SendStatus, arg.SendAt, arg.OrderID)
	return err
}
