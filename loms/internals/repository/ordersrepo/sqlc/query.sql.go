// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package ordersrepo

import (
	"context"
)

const getLastOrderItem = `-- name: GetLastOrderItem :one
select order_id, item_id, count from orders_items
order by order_id DESC
limit 1
`

func (q *Queries) GetLastOrderItem(ctx context.Context) (OrdersItem, error) {
	row := q.db.QueryRow(ctx, getLastOrderItem)
	var i OrdersItem
	err := row.Scan(&i.OrderID, &i.ItemID, &i.Count)
	return i, err
}

const getOrderInfo = `-- name: GetOrderInfo :one
select order_id, status, user_id from orders_info
where order_id=$1
`

func (q *Queries) GetOrderInfo(ctx context.Context, orderID int64) (OrdersInfo, error) {
	row := q.db.QueryRow(ctx, getOrderInfo, orderID)
	var i OrdersInfo
	err := row.Scan(&i.OrderID, &i.Status, &i.UserID)
	return i, err
}

const getOrderItem = `-- name: GetOrderItem :many
select order_id, item_id, count from orders_items
where order_id=$1
`

func (q *Queries) GetOrderItem(ctx context.Context, orderID int64) ([]OrdersItem, error) {
	rows, err := q.db.Query(ctx, getOrderItem, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrdersItem
	for rows.Next() {
		var i OrdersItem
		if err := rows.Scan(&i.OrderID, &i.ItemID, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOrderInfo = `-- name: InsertOrderInfo :exec
insert into orders_info (order_id, status, user_id)
values ($1, $2, $3)
`

type InsertOrderInfoParams struct {
	OrderID int64
	Status  int32
	UserID  int64
}

func (q *Queries) InsertOrderInfo(ctx context.Context, arg InsertOrderInfoParams) error {
	_, err := q.db.Exec(ctx, insertOrderInfo, arg.OrderID, arg.Status, arg.UserID)
	return err
}

const insertOrderItem = `-- name: InsertOrderItem :exec
insert into orders_items (order_id, item_id, count)
values ($1, $2, $3)
`

type InsertOrderItemParams struct {
	OrderID int64
	ItemID  int64
	Count   int32
}

func (q *Queries) InsertOrderItem(ctx context.Context, arg InsertOrderItemParams) error {
	_, err := q.db.Exec(ctx, insertOrderItem, arg.OrderID, arg.ItemID, arg.Count)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
update orders_info
set status=$1
where order_id = $2
`

type UpdateOrderStatusParams struct {
	Status  int32
	OrderID int64
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, arg.Status, arg.OrderID)
	return err
}
